"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const read_file_1 = require("./utilities/read-file");
const import_analyzer_1 = require("./analyzer/import.analyzer");
const create_typescript_project_1 = require("./utilities/create-typescript-project");
class AngularPackage {
    setRoot(root) {
        this.root = root;
        return this;
    }
    setEntryFile(entryFile) {
        this.entryFile = path_1.posix.normalize(entryFile);
        return this;
    }
    setOutDir(outDir) {
        this.outDir = path_1.posix.normalize(outDir);
        return this;
    }
    setTypescriptCompilerOptions(typescriptCompilerOptions) {
        this.typescriptCompilerOptions = typescriptCompilerOptions;
        return this;
    }
    setAngularCompilerOptions(angularCompilerOptions) {
        this.angularCompilerOptions = angularCompilerOptions;
        return this;
    }
    setDependencies(customDependencies) {
        this.dependencies = customDependencies;
        return this;
    }
    asPrimaryEntry() {
        this.isPrimary = true;
        return this;
    }
    asSecondaryEntry() {
        this.isPrimary = false;
        return this;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const outDirSubFolder = this.isPrimary
                ? ''
                : path_1.posix.dirname(this.entryFile).split('/').slice(-1)[0];
            this.outDir = path_1.posix.join(this.outDir, outDirSubFolder);
            const absolutePackageJsonPath = path_1.posix.join(this.root, 'package.json');
            const packageJson = yield read_file_1.readFile(absolutePackageJsonPath);
            this.packageName = path_1.posix.join(packageJson.name, outDirSubFolder);
            const packageDependencies = [
                ...Object.keys(packageJson.dependencies || {}),
                ...Object.keys(packageJson.optionalDependencies || {}),
                ...Object.keys(packageJson.peerDependencies || {})
            ]
                .reduce((dependencyMap, dependency) => {
                dependencyMap[dependency] = '';
                return dependencyMap;
            }, {});
            this.dependencies = Object.assign({}, packageDependencies, this.dependencies);
            this.typescriptProject = create_typescript_project_1.createTypescriptProject(path_1.posix.join(this.root, this.entryFile));
            this.externalImportSources = import_analyzer_1.ImportAnalyzer.getExternalImportSources(this.typescriptProject);
            return this;
        });
    }
    addCustomModulePaths(moduleNameWithPaths) {
        this.typescriptCompilerOptions.paths = Object.assign({}, (this.typescriptCompilerOptions.paths || {}), moduleNameWithPaths);
    }
}
exports.AngularPackage = AngularPackage;
//# sourceMappingURL=angular-package.js.map