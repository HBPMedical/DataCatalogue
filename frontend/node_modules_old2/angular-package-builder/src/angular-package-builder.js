"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const del = require("del");
const angular_package_bundler_1 = require("./bundler/angular-package.bundler");
const angular_package_compiler_1 = require("./compiler/angular-package.compiler");
const angular_package_transformer_1 = require("./transformer/angular-package.transformer");
const angular_package_composer_1 = require("./composer/angular-package.composer");
const angular_package_logger_1 = require("./logger/angular-package-logger");
class AngularPackageBuilder {
    static package(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cleanupOutputFolder(angularPackage);
            yield this.transform(angularPackage);
            yield this.compile(angularPackage);
            yield this.bundle(angularPackage);
            yield this.compose(angularPackage);
            yield this.cleanupTemporaryOutputFolder(angularPackage);
        });
    }
    static transform(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const angularPackageTransformer = new angular_package_transformer_1.AngularPackageTransformer(angularPackage);
            try {
                angular_package_logger_1.AngularPackageLogger.logTaskStart('Apply transformations');
                yield angularPackageTransformer.transform();
                angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
            }
            catch (error) {
                angular_package_logger_1.AngularPackageLogger.logTaskError();
                throw new Error();
            }
        });
    }
    static compile(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const angularPackageCompiler = new angular_package_compiler_1.AngularPackageCompiler(angularPackage);
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Compile TypeScript to ES2015');
            yield angularPackageCompiler.compile('esm2015');
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Compile TypeScript to ES5');
            yield angularPackageCompiler.compile('esm5');
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
        });
    }
    static bundle(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const angularPackageBundler = new angular_package_bundler_1.AngularPackageBundler(angularPackage);
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Generate flat ES2015 bundle');
            yield angularPackageBundler.bundle('fesm2015');
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Generate flat ES5 bundle');
            yield angularPackageBundler.bundle('fesm5');
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Generate UMD bundle');
            yield angularPackageBundler.bundle('umd');
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
        });
    }
    static compose(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            const angularPackageComposer = new angular_package_composer_1.AngularPackageComposer(angularPackage);
            angular_package_logger_1.AngularPackageLogger.logTaskStart('Compose package');
            yield angularPackageComposer.compose();
            angular_package_logger_1.AngularPackageLogger.logTaskSuccess();
        });
    }
    static cleanupOutputFolder(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield del([path_1.posix.join(angularPackage.root, angularPackage.outDir, '**')]);
            }
            catch (error) {
                throw new Error(`An error occured while deleting the output folder at "${angularPackage.outDir}".`);
            }
        });
    }
    static cleanupTemporaryOutputFolder(angularPackage) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield del([path_1.posix.join(angularPackage.root, angularPackage.outDir, 'temp', '**')]);
            }
            catch (error) {
                throw new Error(`An error occured while deleting the temporary output folder at "${angularPackage.outDir}/temp".`);
            }
        });
    }
}
exports.AngularPackageBuilder = AngularPackageBuilder;
//# sourceMappingURL=angular-package-builder.js.map