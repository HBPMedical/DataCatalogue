"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const write_file_1 = require("../utilities/write-file");
const copy_files_1 = require("../utilities/copy-files");
const read_file_1 = require("../utilities/read-file");
const get_file_name_by_package_name_1 = require("../utilities/get-file-name-by-package-name");
const angular_package_logger_1 = require("../logger/angular-package-logger");
class AngularPackageComposer {
    constructor(angularPackage) {
        this.angularPackage = angularPackage;
    }
    compose() {
        return __awaiter(this, void 0, void 0, function* () {
            angular_package_logger_1.AngularPackageLogger.logMessage('Copy build files');
            yield this.copyBuildFiles();
            angular_package_logger_1.AngularPackageLogger.logMessage('Copy bundles');
            yield this.copyBundleFiles();
            angular_package_logger_1.AngularPackageLogger.logMessage('Copy typings');
            yield this.copyTypingFiles();
            angular_package_logger_1.AngularPackageLogger.logMessage('Copy metadata file');
            yield this.copyMetadataFiles();
            angular_package_logger_1.AngularPackageLogger.logMessage('Compose package.json file');
            this.angularPackage.isPrimary
                ? this.createPackageJsonForPrimaryEntry()
                : this.createPackageJsonForSecondaryEntry();
        });
    }
    copyBuildFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm2015', '**', '*.js?(.map)'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'esm2015')),
                copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm5', '**', '*.js?(.map)'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'esm5'))
            ]);
        });
    }
    copyBundleFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([
                copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'fesm2015', '**', '*.js?(.map)'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'fesm2015')),
                copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'fesm5', '**', '*.js?(.map)'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'fesm5')),
                copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'bundles', '**', '*.js?(.map)'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'bundles'))
            ]);
        });
    }
    copyTypingFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            yield copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm2015', '**', '*.d.ts'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir));
        });
    }
    copyMetadataFiles() {
        return __awaiter(this, void 0, void 0, function* () {
            yield copy_files_1.copyFiles(path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm2015', '**', '*.metadata.json'), path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir));
        });
    }
    createPackageJsonForPrimaryEntry() {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonPath = path_1.posix.join(this.angularPackage.root, 'package.json');
            const packageJson = yield read_file_1.readFile(packageJsonPath);
            const packageJsonWithEntryProperties = Object.assign({}, packageJson, this.createEntryProperties());
            const packageJsonPathOut = path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'package.json');
            yield write_file_1.writeFile(packageJsonPathOut, packageJsonWithEntryProperties);
        });
    }
    createPackageJsonForSecondaryEntry() {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonWithEntryProperties = this.createEntryProperties();
            const packageJsonPathOut = path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'package.json');
            yield write_file_1.writeFile(packageJsonPathOut, packageJsonWithEntryProperties);
        });
    }
    createEntryProperties() {
        const fileName = get_file_name_by_package_name_1.getFileNameByPackageName(this.angularPackage.packageName);
        return {
            name: this.angularPackage.packageName,
            module: `esm5/${fileName}.js`,
            es2015: `esm2015/${fileName}.js`,
            esm5: `esm5/${fileName}.js`,
            esm2015: `esm2015/${fileName}.js`,
            fesm5: `fesm5/${fileName}.js`,
            fesm2015: `fesm2015/${fileName}.js`,
            main: `bundles/${fileName}.umd.js`,
            typings: `${fileName}.d.ts`
        };
    }
}
exports.AngularPackageComposer = AngularPackageComposer;
//# sourceMappingURL=angular-package.composer.js.map