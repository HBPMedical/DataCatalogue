"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const angular_external_templates_analyzer_1 = require("./external-templates/angular-external-templates.analyzer");
const angular_external_templates_transformer_1 = require("./external-templates/angular-external-templates.transformer");
const read_file_1 = require("../utilities/read-file");
const angular_external_styles_analyzer_1 = require("./external-styles/angular-external-styles.analyzer");
const angular_external_styles_transformer_1 = require("./external-styles/angular-external-styles.transformer");
const write_file_1 = require("../utilities/write-file");
const angular_package_logger_1 = require("../logger/angular-package-logger");
class AngularPackageTransformer {
    get sourceFiles() {
        return this.angularPackage.typescriptProject.getSourceFiles();
    }
    ;
    constructor(angularPackage) {
        this.angularPackage = angularPackage;
    }
    transform() {
        return __awaiter(this, void 0, void 0, function* () {
            let numberOfFiles = this.sourceFiles.length;
            let processedFiles = 0;
            yield Promise.all(this.sourceFiles.map((sourceFile) => __awaiter(this, void 0, void 0, function* () {
                yield this.inlineExternalTemplates(sourceFile);
                yield this.inlineExternalStyles(sourceFile);
                this.convertLineBreaks(sourceFile);
                yield this.save(sourceFile);
                processedFiles++;
                const relativeFilePath = path_1.posix.relative(this.angularPackage.root, sourceFile.getFilePath());
                const message = `Transform files (${processedFiles}/${numberOfFiles}) :: ${relativeFilePath}`;
                angular_package_logger_1.AngularPackageLogger.logMessage(message);
            })));
        });
    }
    inlineExternalTemplates(sourceFile) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(angular_external_templates_analyzer_1.AngularExternalTemplatesFileAnalyzer.getExternalTemplates(sourceFile)
                .map((externalTemplate) => __awaiter(this, void 0, void 0, function* () {
                let template;
                try {
                    template = yield read_file_1.readFile(externalTemplate.template.path);
                }
                catch (error) {
                    this.handleExternalTemplateError('An error occured while reading an external template.', 'Make sure the template URL is correct, and the referenced template file does exist.', externalTemplate, sourceFile, new Error(`File System: ${error.message.split('[')[1].split(']')[0]}`));
                }
                try {
                    yield angular_external_templates_transformer_1.AngularExternalTemplatesFileTransformer.inlineExternalTemplate(externalTemplate, template);
                }
                catch (error) {
                    this.handleExternalTemplateError('An error occured while transforming an external template.', 'Make sure the external template has a supported file format and is syntactically correct.', externalTemplate, sourceFile, error);
                }
            })));
        });
    }
    inlineExternalStyles(sourceFile) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(angular_external_styles_analyzer_1.AngularExternalStylesAnalyzer.getExternalStyles(sourceFile)
                .map((externalStyle) => __awaiter(this, void 0, void 0, function* () {
                const styles = yield Promise.all(externalStyle.styles.map((style) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        return yield read_file_1.readFile(style.path);
                    }
                    catch (error) {
                        this.handleExternalStyleError('An error occured while reading an external style.', 'Make sure the style URL is correct, and the referenced style file does exist.', externalStyle, style, sourceFile, new Error(`File System: ${error.message.split('[')[1].split(']')[0]}`));
                    }
                })));
                yield Promise.all(styles.map((style, index) => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield angular_external_styles_transformer_1.AngularExternalStylesTransformer.inlineExternalStyle(externalStyle, externalStyle.styles[index], style);
                    }
                    catch (error) {
                        this.handleExternalStyleError('An error occured while transforming an external style.', 'Make sure the external style has a supported file format and is syntactically correct.', externalStyle, externalStyle.styles[index], sourceFile, error);
                    }
                })));
            })));
        });
    }
    convertLineBreaks(sourceFile) {
        sourceFile.formatText({
            newLineCharacter: '\n'
        });
    }
    save(sourceFile) {
        return __awaiter(this, void 0, void 0, function* () {
            const absoluteEntryPath = path_1.posix.join(this.angularPackage.root, this.angularPackage.entryFile);
            const absoluteOutputPath = path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir);
            const relativeFilePath = path_1.posix.relative(path_1.posix.dirname(absoluteEntryPath), sourceFile.getFilePath());
            const filePathOut = path_1.posix.join(absoluteOutputPath, 'temp', 'transformed', relativeFilePath);
            yield write_file_1.writeFile(filePathOut, sourceFile.getText());
        });
    }
    handleExternalTemplateError(message, tip, externalTemplate, sourceFile, details) {
        const templateUrl = externalTemplate.template.node.getText().replace(/'/g, '');
        const sourceFilePath = `./${path_1.posix.relative(this.angularPackage.root, sourceFile.getFilePath())}`;
        const { line, character } = sourceFile.compilerNode.getLineAndCharacterOfPosition(externalTemplate.node.getStart());
        const templateFilePath = `./${path_1.posix.relative(this.angularPackage.root, externalTemplate.template.path)}`;
        const origin = details.message.split(':')[0];
        const messageWithoutOrigin = details.message.split(':').slice(1).join(':').trim();
        const errorMessage = [
            message,
            '',
            `Message:        ${messageWithoutOrigin}`,
            '',
            `Caused by:      ${origin}`,
            `File:           ${sourceFilePath} (at ${line + 1}:${character + 1}) [to be transformed]`,
            `Template url:   ${templateUrl}`,
            `Template file:  ${templateFilePath}`,
            '',
            `Tip: ${tip}`
        ].join('\n');
        angular_package_logger_1.AngularPackageLogger.logMessage(errorMessage, 'error');
        throw new Error(errorMessage);
    }
    handleExternalStyleError(message, tip, externalStyles, externalStyle, sourceFile, details) {
        const styleUrl = externalStyle.node.getText().replace(/'/g, '');
        const sourceFilePath = `./${path_1.posix.relative(this.angularPackage.root, sourceFile.getFilePath())}`;
        const { line, character } = sourceFile.compilerNode.getLineAndCharacterOfPosition(externalStyles.node.getStart());
        const styleFilePath = `./${path_1.posix.relative(this.angularPackage.root, externalStyle.path)}`;
        const origin = details.message.split(':')[0];
        const messageWithoutOrigin = details.message.split(':').slice(1).join(':').trim();
        const errorMessage = [
            message,
            '',
            `Message:     ${messageWithoutOrigin}`,
            '',
            `Caused by:   ${origin}`,
            `File:        ${sourceFilePath} (at ${line + 1}:${character + 1}) [to be transformed]`,
            `Style url:   ${styleUrl}`,
            `Style file:  ${styleFilePath}`,
            '',
            `Tip: ${tip}`
        ].join('\n');
        angular_package_logger_1.AngularPackageLogger.logMessage(errorMessage, 'error');
        throw new Error(errorMessage);
    }
}
exports.AngularPackageTransformer = AngularPackageTransformer;
//# sourceMappingURL=angular-package.transformer.js.map