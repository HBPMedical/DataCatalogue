"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const css_transformer_1 = require("../languages/css.transformer");
const get_file_type_1 = require("../../utilities/get-file-type");
const sass_transformer_1 = require("../languages/sass.transformer");
class AngularExternalStylesTransformer {
    static inlineExternalStyle(externalStyles, externalStyle, style) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedStyle = yield this.prepareStyle(style, get_file_type_1.getFileType(externalStyle.path));
            externalStyles.node.replaceWithText('styles');
            externalStyle.node.replaceWithText(`'${preparedStyle}'`);
        });
    }
    static prepareStyle(style, fileType) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (fileType) {
                case 'css':
                case 'scss':
                case 'sass':
                    return css_transformer_1.CSSTransformer.minify(yield sass_transformer_1.SASSTransformer.compileToCss(style));
                default:
                    throw new Error(`Angular Package Builder: The file type "${fileType}" is not supported for external styles.`);
            }
        });
    }
}
exports.AngularExternalStylesTransformer = AngularExternalStylesTransformer;
//# sourceMappingURL=angular-external-styles.transformer.js.map