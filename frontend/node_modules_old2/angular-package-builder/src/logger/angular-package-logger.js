"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const log = require("log-update");
const logger_symbols_1 = require("./logger-symbols");
const supports_advanced_logging_1 = require("../utilities/supports-advanced-logging");
const is_windows_1 = require("../utilities/is-windows");
class AngularPackageLogger {
    static configureNumberOfBuildSteps(numberOfBuildSteps) {
        this.currentBuildStepNumber = 0;
        this.currentBuildRuntime = undefined;
        this.numberOfBuildSteps = numberOfBuildSteps;
        this.buildNumberMaxNumberOfDigits = this.numberOfBuildSteps.toString().length;
        this.leftIndentation = this.numberOfBuildSteps === 1
            ? ''
            : ' '.repeat(this.buildNumberMaxNumberOfDigits * 2 + 4);
    }
    static logTitle(name) {
        console.log('');
        console.log(is_windows_1.isWindows() ? chalk_1.default.white(name) : chalk_1.default.white.underline(name));
        console.log('');
    }
    static logBuildStart(packageName) {
        this.currentBuildRuntime = new Date().getTime();
        this.currentBuildStepNumber++;
        const currentBuildStepNumberPaddingLeft = '0'
            .repeat(this.numberOfBuildSteps.toString().length - this.currentBuildStepNumber.toString().length);
        const buildProgressLog = this.numberOfBuildSteps === 1
            ? ''
            : `[${currentBuildStepNumberPaddingLeft}${this.currentBuildStepNumber}/${this.numberOfBuildSteps}] `;
        console.log('');
        console.log(`${chalk_1.default.bold.blue(buildProgressLog)}${chalk_1.default.bold.white(`Package "${packageName}"`)}`);
        console.log('');
    }
    static logBuildSuccess() {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            log.done();
            this.state = [];
        }
        this.currentBuildRuntime = new Date().getTime() - this.currentBuildRuntime;
        console.log('');
        console.log(chalk_1.default.bold.green(`${this.leftIndentation}Success!`), chalk_1.default.grey(`(${(this.currentBuildRuntime / 1000).toFixed(2)} seconds)`));
        console.log('');
    }
    static logBuildError() {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            log.done();
            this.state = [];
        }
        this.currentBuildRuntime = new Date().getTime() - this.currentBuildRuntime;
        console.log('');
        console.log(chalk_1.default.bold.red(`${this.leftIndentation}Error!`), chalk_1.default.grey(`(${(this.currentBuildRuntime / 1000).toFixed(2)} seconds)`));
        console.log('');
    }
    static logTaskStart(task) {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            this.state.push({
                task,
                status: 'running',
                messages: []
            });
            this.logToConsoleAdvanced();
        }
        else {
            console.log(this.createTaskLogOutput(task, 'running'));
        }
    }
    static logTaskSuccess() {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            this.state.slice(-1)[0].status = 'success';
            this.logToConsoleAdvanced();
        }
    }
    static logTaskError() {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            this.state.slice(-1)[0].status = 'error';
            this.logToConsoleAdvanced();
        }
    }
    static logPreparationMessage(message, type) {
        console.log(this.createMessageLogOutput(message, type));
    }
    static logMessage(message, type = 'default') {
        if (supports_advanced_logging_1.supportsAdvancedLogging()) {
            this.state.slice(-1)[0].messages = [
                ...this.state.slice(-1)[0].messages.filter((loggerMessage) => {
                    return loggerMessage.type !== 'default';
                }),
                {
                    type,
                    message: message
                }
            ];
            this.logToConsoleAdvanced();
        }
        else {
            if (type !== 'default') {
                console.log(this.createMessageLogOutput(message, type));
            }
        }
    }
    static logToConsoleAdvanced() {
        const logOutput = this.state
            .reduce((logLines, loggerTask) => {
            logLines.push(this.createTaskLogOutput(loggerTask.task, loggerTask.status));
            logLines.push(...loggerTask.messages
                .filter((loggerMessage) => {
                return loggerTask.status === 'running' ? true : loggerMessage.type !== 'default';
            })
                .map((loggerMessage) => {
                return this.createMessageLogOutput(loggerMessage.message, loggerMessage.type);
            }));
            return logLines;
        }, []);
        log(logOutput.join('\n'));
    }
    static createTaskLogOutput(task, status) {
        switch (status) {
            case 'success':
                return chalk_1.default.white(`${this.leftIndentation}${chalk_1.default.green(logger_symbols_1.loggerSymbols.tick)} ${task}`);
            case 'error':
                return chalk_1.default.white(`${this.leftIndentation}${chalk_1.default.red(logger_symbols_1.loggerSymbols.error)} ${task}`);
            default:
                return chalk_1.default.white(`${this.leftIndentation}${logger_symbols_1.loggerSymbols.pointer} ${task}`);
        }
    }
    static createMessageLogOutput(message, type) {
        const leftIndentation = this.leftIndentation && this.leftIndentation !== ''
            ? `${this.leftIndentation}  `
            : '';
        switch (type) {
            case 'warning':
                return chalk_1.default.white(['', ...message.split('\n'), '']
                    .map((messagePart, index) => {
                    return index === 1
                        ? chalk_1.default.yellow(`${leftIndentation}${chalk_1.default.bgYellow.white(' WARNING ')} ${messagePart}`)
                        : messagePart.startsWith('Tip')
                            ? chalk_1.default.yellow(`${leftIndentation}          ${messagePart}`)
                            : messagePart.startsWith('Note')
                                ? chalk_1.default.gray(`${leftIndentation}          ${messagePart}`)
                                : chalk_1.default.white(`${leftIndentation}          ${messagePart}`);
                })
                    .join('\n'));
            case 'error':
                return chalk_1.default.white(['', ...message.split('\n')]
                    .map((messagePart, index) => {
                    return index === 1
                        ? chalk_1.default.red(`${leftIndentation}${chalk_1.default.bgRed.white(' ERROR ')} ${messagePart}`)
                        : messagePart.startsWith('Tip')
                            ? chalk_1.default.yellow(`${leftIndentation}        ${messagePart}`)
                            : messagePart.startsWith('Note')
                                ? chalk_1.default.gray(`${leftIndentation}        ${messagePart}`)
                                : chalk_1.default.white(`${leftIndentation}        ${messagePart}`);
                })
                    .join('\n'));
            default:
                return chalk_1.default.grey(`${leftIndentation}${logger_symbols_1.loggerSymbols.arrow} ${message}`);
        }
    }
}
AngularPackageLogger.state = [];
AngularPackageLogger.numberOfBuildSteps = 0;
AngularPackageLogger.currentBuildStepNumber = 0;
AngularPackageLogger.leftIndentation = '';
exports.AngularPackageLogger = AngularPackageLogger;
//# sourceMappingURL=angular-package-logger.js.map