"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge = require("deepmerge");
const typescript_compilation_targets_1 = require("./typescript-compilation-targets");
const get_file_name_by_package_name_1 = require("../utilities/get-file-name-by-package-name");
class TypeScriptConfigurationBuilder {
    constructor() {
        this.typescriptCompilerOptions = {
            baseUrl: '',
            declaration: true,
            emitDecoratorMetadata: true,
            experimentalDecorators: true,
            lib: [
                'es6',
                'dom',
                'dom.iterable',
                'scripthost'
            ],
            inlineSources: true,
            module: 'ES2015',
            moduleResolution: 'node',
            newLine: 'LF',
            pretty: true,
            sourceMap: true
        };
        this.files = [];
        this.angularCompilerOptions = {
            annotateForClosureCompiler: true,
            preserveWhitespaces: false,
            skipTemplateCodegen: true,
            strictMetadataEmit: true
        };
    }
    setEntry(entryFile, entryDir) {
        this.files.push(entryFile);
        return this;
    }
    setOutDir(outDir) {
        this.typescriptCompilerOptions.outDir = outDir;
        return this;
    }
    setPackageName(packageName) {
        this.angularCompilerOptions.flatModuleId = packageName;
        this.angularCompilerOptions.flatModuleOutFile = `${get_file_name_by_package_name_1.getFileNameByPackageName(packageName)}.js`;
        return this;
    }
    setCompilationTarget(target) {
        this.typescriptCompilerOptions.target = typescript_compilation_targets_1.typescriptCompilationTargets[target];
        return this;
    }
    setCustomTypescriptCompilerOptions(typescriptCompilerOptions) {
        this.typescriptCompilerOptions = deepmerge(typescriptCompilerOptions, this.typescriptCompilerOptions);
        return this;
    }
    setCustomAngularCompilerOptions(angularCompilerOptions) {
        this.angularCompilerOptions = deepmerge(angularCompilerOptions, this.angularCompilerOptions);
        return this;
    }
    build() {
        return {
            compilerOptions: this.typescriptCompilerOptions,
            files: this.files,
            angularCompilerOptions: this.angularCompilerOptions
        };
    }
}
exports.TypeScriptConfigurationBuilder = TypeScriptConfigurationBuilder;
//# sourceMappingURL=typescript-configuration-builder.js.map