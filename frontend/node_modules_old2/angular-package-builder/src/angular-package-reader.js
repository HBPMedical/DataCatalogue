"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const jsonschema_1 = require("jsonschema");
const angular_package_1 = require("./angular-package");
const read_file_1 = require("./utilities/read-file");
const angularPackageSchema = require("../angular-package.schema.json");
class AngularPackageReader {
    static readAngularPackageJsonFiles(angularPackageJsonPaths) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield Promise.all(angularPackageJsonPaths.map((angularPackageJsonPath) => __awaiter(this, void 0, void 0, function* () {
                let angularPackageJson;
                try {
                    angularPackageJson = yield read_file_1.readFile(angularPackageJsonPath);
                }
                catch (error) {
                    this.handleReadError(error, angularPackageJsonPath);
                }
                const validatorResult = jsonschema_1.validate(angularPackageJson, angularPackageSchema);
                if (!validatorResult.valid) {
                    this.handleValidationError(validatorResult.errors, angularPackageJsonPath);
                }
                const angularPackageCwd = path_1.posix.dirname(path_1.posix.join(this.cwd, angularPackageJsonPath));
                const primaryAngularPackage = yield new angular_package_1.AngularPackage()
                    .setRoot(angularPackageCwd)
                    .setEntryFile(angularPackageJson.entryFile)
                    .setOutDir(angularPackageJson.outDir)
                    .setTypescriptCompilerOptions(angularPackageJson.typescriptCompilerOptions || {})
                    .setAngularCompilerOptions(angularPackageJson.angularCompilerOptions || {})
                    .setDependencies(angularPackageJson.dependencies || {})
                    .asPrimaryEntry()
                    .init();
                const secondaryAngularPackages = yield Promise.all((angularPackageJson.secondaryEntries || []).map((secondaryEntry) => __awaiter(this, void 0, void 0, function* () {
                    return new angular_package_1.AngularPackage()
                        .setRoot(angularPackageCwd)
                        .setEntryFile(secondaryEntry.entryFile)
                        .setOutDir(angularPackageJson.outDir)
                        .setTypescriptCompilerOptions(angularPackageJson.typescriptCompilerOptions || {})
                        .setAngularCompilerOptions(angularPackageJson.angularCompilerOptions || {})
                        .setDependencies(angularPackageJson.dependencies || {})
                        .asSecondaryEntry()
                        .init();
                })));
                return [primaryAngularPackage, ...secondaryAngularPackages];
            })));
        });
    }
    static handleReadError(error, angularPackageJsonPath) {
        const errorMessage = [
            'An error occured while starting the build.',
            '',
            'Message:    Cannot read the angular package configuration file.',
            '',
            'Caused by:  File System',
            `File:       ${angularPackageJsonPath[0] === './' ? '' : './'}${angularPackageJsonPath}`,
            `Details:    ${error.message.split('[')[1].split(']')[0]}`,
            '',
            'Tip: Verify the path is correct, the file exists and the file is valid JSON.',
            '',
            ''
        ].join('\n');
        throw new Error(errorMessage);
    }
    static handleValidationError(errors, angularPackageJsonPath) {
        const errorDetails = errors
            .map((error) => {
            return `${error.property.replace('instance.', '').replace('instance', '')} ${error.message}`.trim();
        })
            .map((error, index) => {
            return index === 0
                ? `Details:    ${error[0].toUpperCase()}${error.slice(1)}`
                : `            ${error[0].toUpperCase()}${error.slice(1)}`;
        });
        const errorMessage = [
            'An error occured while starting the build.',
            '',
            'Message:    The angular package file is not valid.',
            '',
            'Caused by:  Angular Package File Validator',
            `File:       ${angularPackageJsonPath[0] === './' ? '' : './'}${angularPackageJsonPath}`,
            ...errorDetails,
            '',
            'Tip: Verify that the angular package file is valid, following the schema defined in "angular-package.schema.json".',
            '',
            ''
        ].join('\n');
        throw new Error(errorMessage);
    }
}
AngularPackageReader.cwd = process.cwd().replace(/\\/g, '/');
exports.AngularPackageReader = AngularPackageReader;
//# sourceMappingURL=angular-package-reader.js.map