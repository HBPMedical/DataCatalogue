"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const semver_1 = require("semver");
const rollup_1 = require("rollup");
const rollup_configuration_builder_1 = require("./rollup-configuration-builder");
const get_installed_dependency_version_1 = require("../utilities/get-installed-dependency-version");
const angular_dependencies_1 = require("./dependencies/angular-dependencies");
const rxjs6_dependencies_1 = require("./dependencies/rxjs6-dependencies");
const rxjs5_dependencies_1 = require("./dependencies/rxjs5-dependencies");
const typescript_dependencies_1 = require("./dependencies/typescript-dependencies");
const angular_package_logger_1 = require("../logger/angular-package-logger");
class AngularPackageBundler {
    constructor(angularPackage) {
        this.angularPackage = angularPackage;
    }
    bundle(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const { inputOptions, outputOptions } = yield this.buildRollupConfiguration(target);
            try {
                const bundle = yield rollup_1.rollup(inputOptions);
                yield bundle.write(outputOptions);
            }
            catch (error) {
                this.handleRollupError(error, target.toUpperCase(), outputOptions.file);
            }
        });
    }
    buildRollupConfiguration(target) {
        return __awaiter(this, void 0, void 0, function* () {
            const entryFileName = `${this.angularPackage.packageName.split('/').pop()}.js`;
            const entryFile = target === 'fesm2015'
                ? path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm2015', entryFileName)
                : path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'esm5', entryFileName);
            const outDir = target === 'umd'
                ? path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', 'bundles')
                : path_1.posix.join(this.angularPackage.root, this.angularPackage.outDir, 'temp', target);
            const expectedDependencies = yield this.getExpectedDependencies();
            return new rollup_configuration_builder_1.RollupConfigurationBuilder()
                .setPackageName(this.angularPackage.packageName)
                .setEntry(entryFile)
                .setTarget(target)
                .setOutDir(outDir)
                .setDependencies(this.angularPackage.dependencies, expectedDependencies)
                .build();
        });
    }
    getExpectedDependencies() {
        return __awaiter(this, void 0, void 0, function* () {
            const rxjsVersion = yield get_installed_dependency_version_1.getInstalledDependencyVersion('rxjs');
            const rxjsDependencies = semver_1.gte(rxjsVersion, '6.0.0')
                ? rxjs6_dependencies_1.rxjs6Dependencies
                : rxjs5_dependencies_1.rxjs5Dependencies;
            return Object.assign({}, angular_dependencies_1.angularDependencies, rxjsDependencies, typescript_dependencies_1.typescriptDependencies);
        });
    }
    handleRollupError(error, target, file) {
        const relativeFilePath = file
            .split('/')
            .slice(-2)
            .join('/');
        const errorMessage = [
            `An error occured while creating the ${target} bundle.`,
            '',
            `Message:    ${error.message}`,
            '',
            'Caused by:  Rollup',
            `File:       ./${relativeFilePath} [to be generated]`,
            '',
            'Tip: For known pitfalls, also see https://github.com/dominique-mueller/angular-package-builder#known-pitfalls-with-solutions'
        ].join('\n');
        angular_package_logger_1.AngularPackageLogger.logMessage(errorMessage, 'error');
        throw new Error(errorMessage);
    }
}
exports.AngularPackageBundler = AngularPackageBundler;
//# sourceMappingURL=angular-package.bundler.js.map