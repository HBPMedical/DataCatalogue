"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const rollupCommonjsPlugin = require("rollup-plugin-commonjs");
const rollupNodeResolvePlugin = require("rollup-plugin-node-resolve");
const rollupSourcemaps = require("rollup-plugin-sourcemaps");
const get_file_name_by_package_name_1 = require("../utilities/get-file-name-by-package-name");
const rollup_bundling_targets_1 = require("./rollup-bundling-targets");
const angular_package_logger_1 = require("../logger/angular-package-logger");
class RollupConfigurationBuilder {
    constructor() {
        this.inputOptions = {
            onwarn: (warning) => {
                if (warning.code === 'THIS_IS_UNDEFINED') {
                    return;
                }
                const message = [
                    `A warning got emitted while creating the ${this.target.toUpperCase()} bundle.`,
                    '',
                    `Details:    ${warning.message}`,
                    '',
                    `Caused by:  Rollup`,
                    `Code:       ${warning.code}`
                ];
                if (warning.code === 'UNUSED_EXTERNAL_IMPORT') {
                    message.push('', 'Tip: Remove the unused import from your source files to get rid of this warning.');
                    if (warning.message.indexOf('QueryList') !== -1 && warning.message.indexOf('@angular/core') !== -1) {
                        message.push('Note: This warning might be caused by a known bug in the Angular Compiler (see https://github.com/angular/angular/issues/21280).');
                    }
                }
                angular_package_logger_1.AngularPackageLogger.logMessage(message.join('\n'), 'warning');
            },
            preserveSymlinks: true,
            plugins: [
                rollupNodeResolvePlugin(),
                rollupCommonjsPlugin(),
                rollupSourcemaps(),
                (() => {
                    let processedFiles = 0;
                    return {
                        name: 'logger',
                        load: (id) => {
                            processedFiles++;
                            const normalizedFilePath = id.toString().replace(/\\/g, path_1.posix.sep);
                            const relativeFilePath = normalizedFilePath.indexOf('node_modules') === -1
                                ? path_1.posix.relative(path_1.posix.dirname(this.inputOptions.input), normalizedFilePath)
                                : `node_modules${normalizedFilePath.split('node_modules').slice(-1)[0]}`;
                            angular_package_logger_1.AngularPackageLogger.logMessage(`Processing files (${processedFiles}) :: ${relativeFilePath}`);
                        },
                        ongenerate: (options, source) => {
                            angular_package_logger_1.AngularPackageLogger.logMessage(`Generate bundle :: ${path_1.posix.basename(options.file)}`);
                        },
                        onwrite: (options, source) => {
                            angular_package_logger_1.AngularPackageLogger.logMessage(`Write bundle :: ${path_1.posix.basename(options.file)}`);
                        },
                    };
                })()
            ]
        };
        this.outputOptions = {
            sourcemap: true
        };
        this.outDir = '';
    }
    setPackageName(packageName) {
        this.outputOptions.name = get_file_name_by_package_name_1.getFileNameByPackageName(packageName);
        return this;
    }
    setEntry(entryFile) {
        this.inputOptions.input = entryFile;
        return this;
    }
    setTarget(target) {
        this.target = target;
        this.outputOptions.format = rollup_bundling_targets_1.rollupBundlingTargets[target];
        return this;
    }
    setOutDir(outDir) {
        this.outDir = outDir;
        return this;
    }
    setDependencies(knownDependencies, expectedDependencies) {
        const knownDependencyModules = Object.keys(knownDependencies);
        this.inputOptions.external = (moduleName) => {
            return this.isExternalModule(moduleName, knownDependencyModules);
        };
        this.outputOptions.globals = (moduleName) => {
            return this.getModuleGlobalName(moduleName, knownDependencies, expectedDependencies);
        };
        return this;
    }
    build() {
        this.outputOptions.file = this.deriveOutFilePath();
        this.outputOptions.sourcemapFile = this.deriveSourcemapFilePath();
        return {
            inputOptions: this.inputOptions,
            outputOptions: this.outputOptions
        };
    }
    deriveOutFilePath() {
        const bundleSuffix = this.outputOptions.format === 'umd'
            ? '.umd'
            : '';
        const fileName = `${this.outputOptions.name}${bundleSuffix}.js`;
        return path_1.posix.join(this.outDir, fileName);
    }
    deriveSourcemapFilePath() {
        return path_1.posix.join(path_1.posix.dirname(this.inputOptions.input), path_1.posix.basename(this.outputOptions.file));
    }
    isExternalModule(moduleName, knownDependencies) {
        return knownDependencies
            .some((knownDependency) => {
            return moduleName === knownDependency || moduleName.startsWith(`${knownDependency}/`);
        });
    }
    getModuleGlobalName(moduleName, knownDependencies, expectedDependencies) {
        if (!!knownDependencies[moduleName]) {
            return knownDependencies[moduleName];
        }
        else if (!!expectedDependencies[moduleName]) {
            return expectedDependencies[moduleName];
        }
        else {
            return '';
        }
    }
}
exports.RollupConfigurationBuilder = RollupConfigurationBuilder;
//# sourceMappingURL=rollup-configuration-builder.js.map