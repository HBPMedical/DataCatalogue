"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const angular_package_reader_1 = require("./src/angular-package-reader");
const angular_package_orchestrator_1 = require("./src/angular-package-orchestrator");
const angular_package_builder_1 = require("./src/angular-package-builder");
const flatten_array_1 = require("./src/utilities/flatten-array");
const angular_package_logger_1 = require("./src/logger/angular-package-logger");
function runAngularPackageBuilder(angularPackageJsonPaths) {
    return __awaiter(this, void 0, void 0, function* () {
        angular_package_logger_1.AngularPackageLogger.logTitle('Angular Package Builder');
        let angularPackages;
        try {
            angularPackages = yield angular_package_reader_1.AngularPackageReader.readAngularPackageJsonFiles(angularPackageJsonPaths);
        }
        catch (error) {
            angular_package_logger_1.AngularPackageLogger.logPreparationMessage(error.message, 'error');
            throw new Error(error.message);
        }
        let buildOrchestration;
        try {
            buildOrchestration = angular_package_orchestrator_1.AngularPackageOrchestrator.orchestrateAngularPackagesBuild(angularPackages);
        }
        catch (error) {
            angular_package_logger_1.AngularPackageLogger.logPreparationMessage(error.message, 'error');
            throw new Error(error.message);
        }
        const flattenedBuildOrchestration = flatten_array_1.flattenArray(buildOrchestration);
        angular_package_logger_1.AngularPackageLogger.configureNumberOfBuildSteps(flattenedBuildOrchestration.length);
        const builtAngularPackages = {};
        for (const angularPackage of flattenedBuildOrchestration) {
            angular_package_logger_1.AngularPackageLogger.logBuildStart(angularPackage.packageName);
            angularPackage.addCustomModulePaths(builtAngularPackages);
            try {
                yield angular_package_builder_1.AngularPackageBuilder.package(angularPackage);
            }
            catch (error) {
                angular_package_logger_1.AngularPackageLogger.logBuildError();
                throw new Error(error.message);
            }
            builtAngularPackages[angularPackage.packageName] = [
                path_1.posix.join(angularPackage.root, angularPackage.outDir)
            ];
            angular_package_logger_1.AngularPackageLogger.logBuildSuccess();
        }
    });
}
exports.runAngularPackageBuilder = runAngularPackageBuilder;
//# sourceMappingURL=index.js.map